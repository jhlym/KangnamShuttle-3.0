app.controller('SchoolScheduleController', function ($scope, $http, $mdToast, $mdSidenav, $window, $mdDialog, KSAppService) {
  KSAppService.info('SchoolScheduleController', 'SchoolScheduleController', 'init')

  $scope.googleAuthStatus = '계정 확인 중'
  $scope.isUserSignedIn = false
  $scope.isSyncProcessWorking = false
  $scope.deleteCounter = ZERO
  $scope.deleteLength = ZERO
  $scope.insertCounter = ZERO
  $scope.insertLength = ZERO
  $scope.schoolScheduleList = []
  $scope.registeredMySchedule = []

  $scope.onLoad = function () {
    getLatestSchoolLifeSchedule()
  }

  $scope.syncCalendar = function () {
    if ($scope.isSyncProcessWorking === false) {
      $scope.deleteCounter = ZERO
      $scope.deleteLength = ZERO
      $scope.insertCounter = ZERO
      $scope.insertLength = $scope.schoolScheduleList.length
      $scope.googleAuthStatus = '동기화가 시작됨'
      $scope.isSyncProcessWorking = true
      KSAppService.info('SchoolScheduleController', 'syncCalendar', 'sync started')

      routineOfSyncCalendar()
    }
  }

  $scope.testInsert = function () {
    var resource = {
      'summary': 'Appointment',
      // "location": "Somewhere",
      'start': {
        'date': '2019-03-01',
        // "dateTime": "2019-03-01T10:00:00-07:00",
        'timeZone': 'Asia/Seoul'
      },
      'end': {
        'date': '2019-03-02',
        // "dateTime": "2019-03-02T10:25:00-07:00",
        'timeZone': 'Asia/Seoul'
      },
      'description': 'Generated by KangnamShuttle-3.0'
    }
    var request = gapi.client.calendar.events.insert({
      'calendarId': 'primary',
      'resource': resource
    })
    firebase.auth().currentUser.getIdToken(/* forceRefresh */ true)
      .then(function (idToken) {
        request.execute(function (resp) {
          console.log(resp)
        })
      }).catch(function (error) {

      })
  }

  $scope.testDelete = function () {
    var resource = {
      calendarId: 'primary',
      eventId: '1pdpsb3q6mhj9qi139llahk3l8'
    }
    console.log('start delete with', resource)
    var request = gapi.client.calendar.events.delete(resource)
    firebase.auth().currentUser.getIdToken(/* forceRefresh */ true)
      .then(function (idToken) {
        console.log('ok token generated')
        request.execute(function (resp) {
          console.log(resp)
        })
      })
      .catch(function (error) {
        console.log('cannot generate token', error)
      })
  }

  function routineOfSyncCalendar () {
    firebase.auth().currentUser.getIdToken(/* forceRefresh */ true)
      .then(function (idToken) {
        KSAppService.setToken(idToken)
        $scope.googleAuthStatus = '이미 등록된 캘린더 리스트를 가져오는 중'
        getAlreadyRegisteredMyCalendarList(function () {
          $scope.googleAuthStatus = '이미 등록된 캘린더 리스트를 삭제하는 중'
          deleteAlreadyRegisteredCalendar(function () {
            KSAppService.info('SchoolScheduleController', 'routineOfSyncCalendar', 'delete already registered calendar done')

            $scope.googleAuthStatus = '새 캘린더 리스트를 등록하는 중'
            registerNewCalendarList(function (myRegisterCalendarList) {
              $scope.googleAuthStatus = '새 캘린더 리스트를 저장하는 중'
              uploadMyNewCalendarList(myRegisterCalendarList)
            })
          })
        })
      }).catch(function (error) {
        KSAppService.error('SchoolScheduleController', 'routineOfSyncCalendar', 'error: ' + JSON.stringify(error))
      })
  }

  function deleteAlreadyRegisteredCalendar (callbackFunc) {
    KSAppService.info('SchoolScheduleController', 'deleteAlreadyRegisteredCalendar', 'start delete')
    var batch = gapi.client.newBatch()
    $scope.deleteCounter = ZERO
    $scope.deleteLength = $scope.registeredMySchedule.length

    KSAppService.debug('SchoolScheduleController', 'deleteAlreadyRegisteredCalendar', 'registered schedule: ' + $scope.registeredMySchedule.length)

    if ($scope.registeredMySchedule.length <= ZERO) {
      KSAppService.info('SchoolScheduleController', 'deleteAlreadyRegisteredCalendar', 'nothing to delete calendar, skip it')
      callbackFunc()
      return
    }

    for (var scheduleIndex = 0; scheduleIndex < $scope.registeredMySchedule.length; scheduleIndex += 1) {
      var schedule = $scope.registeredMySchedule[scheduleIndex]
      if (schedule.hasOwnProperty('id')) {
        var id = schedule['id']
        KSAppService.debug('SchoolScheduleController', 'deleteAlreadyRegisteredCalendar', 'del #' + id)

        var resource = {
          calendarId: 'primary',
          eventId: id
        }
        var request = gapi.client.calendar.events.delete(resource)
        batch.add(request)
        $scope.deleteCounter += 1
      } else {
        $scope.deleteCounter += 1
      }
    }
    if ($scope.deleteCounter >= $scope.deleteLength) {
      batch.then(function (data) {
        KSAppService.debug('SchoolScheduleController', 'deleteAlreadyRegisteredCalendar', 'delete batch result: ' + JSON.stringify(data))

        callbackFunc()
      })
        .catch(function (error) {
          KSAppService.error('SchoolScheduleController', 'deleteAlreadyRegisteredCalendar', 'cannot batch: ' + JSON.stringify(error))

          callbackFunc()
        })
    }
  }

  function getAlreadyRegisteredMyCalendarList (callbackFunc) {
    var payload = {}
    KSAppService.getReq(
      API_GET_PRIVATE_SCHOOL_MY_CALENDAR,
      payload,
      function (data) {
        KSAppService.debug('SchoolScheduleController', 'getAlreadyRegisteredMyCalendarList', 'data: ' + JSON.stringify(data))
        initMyRegisteredScheduleList(data, callbackFunc)
      },
      function (error) {
        KSAppService.error('SchoolScheduleController', 'getAlreadyRegisteredMyCalendarList', 'error: ' + JSON.stringify(error))
      }
    )
  }

  function initMyRegisteredScheduleList (data, callbackFunc) {
    $scope.registeredMySchedule = data['data']
    $scope.deleteLength = $scope.registeredMySchedule.length
    $scope.deleteCounter = ZERO
    KSAppService.info('SchoolScheduleController', 'initMyRegisteredScheduleList', 'already registered data received')
    callbackFunc()
  }

  function uploadMyNewCalendarList (myNewCalendarList) {
    var payload = {
      schedule: myNewCalendarList
    }

    KSAppService.patchReq(
      API_PATCH_PRIVATE_SCHOOL_MY_CALENDAR,
      payload,
      function (data) {
        KSAppService.debug('SchoolScheduleController', 'uploadMyNewCalendarList', 'data: ' + JSON.stringify(data))
        KSAppService.showToast('캘린더 동기화가 끝났습니다.', TOAST_SHOW_LONG)
        $scope.googleAuthStatus = '캘린더 동기화가 끝났습니다.'
        $scope.isSyncProcessWorking = false
      },
      function (error) {
        KSAppService.error('SchoolScheduleController', 'uploadMyNewCalendarList', 'error: ' + JSON.stringify(error))
      }
    )
  }

  function registerNewCalendarList (callbackFunc) {
    var registerCalendarList = []
    var batch = gapi.client.newBatch()
    $scope.insertCounter = ZERO
    $scope.insertLength = ZERO

    $scope.googleAuthStatus = '최신 학사 일정을 추가하는 중'
    for (var month = 0; month < $scope.schoolScheduleList.length; month += 1) {
      $scope.insertLength += $scope.schoolScheduleList[month].length
    }
    // $scope.insertCounter = 1
    KSAppService.debug('SchoolScheduleController', 'registerNewCalendarList', 'event ' + $scope.insertLength + ' detected')

    for (var month = 0; month < $scope.schoolScheduleList.length; month += 1) {
      var monthStr = (month + 1) < 10 ? '0' + (month + 1) : '' + month
      var monthFirst = monthStr + '-00'
      var currentYear = new Date().getFullYear()

      for (var itemIndex = 0; itemIndex < $scope.schoolScheduleList[month].length; itemIndex += 1) {
        var item = $scope.schoolScheduleList[month][itemIndex]
        var startYear = currentYear + '-'

        var endYear = currentYear + '-'

        var startDate = ''

        var endDate = ''

        if (item['regexpDate'].length > 1) {
          startDate = item['regexpDate'][0]
          endDate = item['regexpDate'][1]
        } else {
          startDate = item['regexpDate'][0]
          endDate = item['regexpDate'][0]
        }

        if (startDate < endDate !== true && startDate != endDate) {
          if (startDate < monthFirst !== true && monthFirst < endDate) {
            startYear = (currentYear - 1) + '-'
          } else {
            endYear = (currentYear + 1) + '-'
          }
        }
        startDate = startYear + startDate
        endDate = endYear + endDate

        var endDateObj = new Date(endDate)
        endDateObj.setDate(endDateObj.getDate() + 1)
        endDate = endDateObj.toISOString().substring(0, 10)

        var resource = {
          'summary': item['eventText'],
          // "location": "Somewhere",
          'start': {
            'date': startDate,
            // "dateTime": "2019-03-01T10:00:00-07:00",
            'timeZone': 'Asia/Seoul'
          },
          'end': {
            'date': endDate,
            // "dateTime": "2019-03-02T10:25:00-07:00",
            'timeZone': 'Asia/Seoul'
          },
          'description': item['date'] + '\n' + item['eventText'] + '\n' + '<Generated by KangnamShuttle-3.0>'
        }
        var request = gapi.client.calendar.events.insert({
          'calendarId': 'primary',
          'resource': resource
        })

        batch.add(request)

        KSAppService.debug('SchoolScheduleController', 'registerNewCalendarList', 'month: ' + month + ' item: ' + itemIndex + ' resource: ' + JSON.stringify(resource))

        $scope.insertCounter += 1
        // registerCalendarList.push(request)
        // KSAppService.debug("SchoolScheduleController", "registerNewCalendarList", "calendar: " + JSON.stringify(registerCalendarList))

        // break
      }
      // break
    }

    if ($scope.insertCounter >= $scope.insertLength) {
      registerCalendarList = []
      KSAppService.info('SchoolScheduleController', 'registerNewCalendarList', 'ok insert done')
      batch.then(function (data) {
        console.log('batch', data)
        for (var key in data['result']) {
          var event = data['result'][key]
          registerCalendarList.push(JSON.parse(event['body']))
        }
        KSAppService.debug('SchoolScheduleController', 'registerNewCalendarList', 'schedule list: ' + JSON.stringify(registerCalendarList))
        callbackFunc(registerCalendarList)
      })
        .catch(function (error) {
          KSAppService.error('SchoolScheduleController', 'registerNewCalendarList', 'cannot batch: ' + JSON.stringify(error))

          callbackFunc(registerCalendarList)
        })
    }
  }

  function getLatestSchoolLifeSchedule () {
    var payload = {}

    KSAppService.getReq(
      API_GET_PUBLIC_SCHOOL_LIFE_SCHEDULE,
      payload,
      function (data) {
        KSAppService.debug('SchoolScheduleController', 'getLatestSchoolLifeSchedule', 'result: ' + JSON.stringify(data))
        initLatestSchoolLifeSchedule(data)
      },
      function (error) {
        KSAppService.error('SchoolScheduleController', 'getLatestSchoolLifeSchedule', 'cannot get schedule: ' + JSON.stringify(error))
      }
    )
  }

  function initLatestSchoolLifeSchedule (data) {
    $scope.schoolScheduleList = data['data']
  }

  function listenAuthStatusChanged () {
    firebase.auth().onAuthStateChanged(function (user) {
      if (user) {
        // User is signed in.
        var displayName = user.displayName
        var email = user.email
        var emailVerified = user.emailVerified
        var photoURL = user.photoURL
        var isAnonymous = user.isAnonymous
        var uid = user.uid
        var providerData = user.providerData
        // ...
        KSAppService.debug('SchoolScheduleController', 'listenAuthStatusChanged', 'signed in user info: ' + JSON.stringify(user))
        if (emailVerified) {
          gapi.load('client', {
            callback: function () {
              KSAppService.info('SchoolScheduleController', 'listenAuthStatusChanged', 'gapi loaded start init')

              const apiData = {
                apiKey: KSAppService.config.apiKey,
                clientId: KSAppService.config.clientId,
                discoveryDocs: KSAppService.config.discoveryDocs,
                scope: KSAppService.config.scopes.join(' ')
              }

              KSAppService.debug('SchoolScheduleController', 'listenAuthStatusChanged', 'api data: ' + JSON.stringify(apiData))

              gapi.client
                .init(apiData)
              // Loading is finished, so start the app
                .then(function () {
                  // Make sure the Google API Client is properly signed in
                  const authInstance = gapi.auth2.getAuthInstance()
                  const googleUser = authInstance.signIn()
                    .then(function () {
                      if (authInstance.isSignedIn.get()) {
                        $scope.$apply(function () {
                          $scope.isUserSignedIn = true
                          $scope.googleAuthStatus = '계정이 확인되었습니다.'
                        })
                        KSAppService.debug('SchoolScheduleController', 'listenAuthStatusChanged', 'gapi user signed in')
                      }
                    })
                    .catch(function (error) {
                      $scope.isUserSignedIn = false
                      // firebase.auth().signOut(); // Something went wrong, sign out
                      $scope.googleAuthStatus = '계정을 확인하는 중 문제가 발생하였습니다. 대부분 팝업 허용이 되지 않았을 경우 이 메시지가 출력됩니다.'
                      KSAppService.error('SchoolScheduleController', 'listenAuthStatusChanged', 'gapi auth error: ' + JSON.stringify(error))
                    })
                })
            }
          })
        }
      } else {
        // User is signed out.
        // ...
        $scope.isUserSignedIn = false
        $scope.googleAuthStatus = '로그인 되지 않았습니다.'
        KSAppService.warn('SchoolScheduleController', 'listenAuthStatusChanged', 'user not signed in')
      }
    })
  }

  listenAuthStatusChanged()
})
